[gd_scene load_steps=20 format=2]

[ext_resource path="res://world/rooms/room1.tscn" type="PackedScene" id=1]
[ext_resource path="res://player/player.tscn" type="PackedScene" id=2]
[ext_resource path="res://world/World.gd" type="Script" id=3]
[ext_resource path="res://general purpose/UI/UI.tscn" type="PackedScene" id=4]
[ext_resource path="res://world/rooms/room2.tscn" type="PackedScene" id=5]
[ext_resource path="res://world/Lighting.gd" type="Script" id=6]
[ext_resource path="res://world/rooms/room4.tscn" type="PackedScene" id=7]
[ext_resource path="res://world/rooms/room6.tscn" type="PackedScene" id=8]
[ext_resource path="res://world/rooms/room7.tscn" type="PackedScene" id=9]
[ext_resource path="res://world/Camera_shake.gd" type="Script" id=10]
[ext_resource path="res://Assets/Background/mountains.png" type="Texture" id=11]
[ext_resource path="res://Assets/Background/sky.png" type="Texture" id=12]
[ext_resource path="res://world/rooms/room3.tscn" type="PackedScene" id=13]
[ext_resource path="res://world/rooms/roomoutside1.tscn" type="PackedScene" id=14]

[sub_resource type="AnimationNodeStateMachinePlayback" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
render_mode unshaded;

uniform mat4 global_transform;
uniform sampler2D light_data;
uniform int n_lights = 0;
uniform vec4 dark_color : hint_color = vec4(0.25, 0.0625, 0.25, 1.0);
uniform vec4 default_light_color : hint_color;
uniform float light_level : hint_range(0.0, 1.0) = 0.0;
uniform float offset_modifier : hint_range(0.0, 8.0) = 1.0;
uniform int n_light_bands : hint_range(1, 13) = 7;
uniform bool will_smooth_shade = false;
uniform float band_decay_rate : hint_range(0.0, 1.0, 0.05) = 0.5;
uniform float light_strength_modifier : hint_range(0.0, 1.0) = 1.0;

varying vec2 world_position;

void vertex() {
	world_position = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
}

void fragment() {
	// floor() the world_position so that it matches the native resolution
	vec2 frag_position = floor(world_position);
	float m_value = 0.0; // 0.0 == dark, 1.0 == light
	vec4 light_color = default_light_color;
	// Iterate through every light source.
	for(int i = 0; i < n_lights; i++) {
		// Get the data for this light source as passed in via texture
		vec4 texel = texelFetch(light_data, ivec2(i, 0), 0);
		
		// How far the light source extends
		float radius = texel.a;
		// How bright the light source is
		float strength = texel.b;
		// Distance from this pixel to the light source then normalize
		float dist = distance(texel.xy, frag_position);
		dist = min(dist / radius, 1.0);
		
		// offset so that light source doesn't fade immediately
		dist = max((dist * offset_modifier) - (offset_modifier - 1.0), 0.0);
		
		float value = 0.0;
		if(will_smooth_shade) {
			value = (1.0 - dist) * strength * light_strength_modifier;
		}
		else {
			// decay offset so that max value == 1.0
			float offset = pow(band_decay_rate, float(n_light_bands));
			for(int p = 0; p < n_light_bands; p++) {
				// Get max radius for this light band
				float radius_check = 1.0 - pow(band_decay_rate, float(p + 1)) + offset;
				// if pixel is less than the band's radius, then it's in the pth band
				if(dist < radius_check) {
					// Set it's value to the position of the band before this one
					value = (pow(band_decay_rate, float(p)) - offset)
							* strength * light_strength_modifier;
					// Nearest band was found, so break the loop
					break;
				}
			}
		}
		value = clamp(value, 0.0, 1.0);
		if(value > m_value) {
			m_value = value;
			light_color = texelFetch(light_data, ivec2(i, 1), 0);
		}
	}
	
	// mix darkness with light based on light level
	vec4 ambient_color = mix(dark_color, light_color, m_value);
	// apply global light level
	ambient_color.a *= 1.0 - light_level;
	// get screen color for this pixel
	vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// apply multiply blend mode
	COLOR = screen_color * ambient_color;
	
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/global_transform = null
shader_param/n_lights = 0
shader_param/dark_color = Color( 0.137255, 0.105882, 0.270588, 0.827451 )
shader_param/default_light_color = Color( 0.498039, 0.498039, 0.498039, 1 )
shader_param/light_level = 0.0
shader_param/offset_modifier = 1.0
shader_param/n_light_bands = 7
shader_param/will_smooth_shade = false
shader_param/band_decay_rate = 0.5
shader_param/light_strength_modifier = 1.0

[sub_resource type="Animation" id=6]
resource_name = "inside"
length = 0.55
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:material:shader_param/dark_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0.137255, 0.105882, 0.270588, 0.490196 ), Color( 0.137255, 0.105882, 0.270588, 0.827451 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "outside"
length = 0.55
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:material:shader_param/dark_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0.137255, 0.105882, 0.270588, 0.827451 ), Color( 0.137255, 0.105882, 0.270588, 0.490196 ) ]
}

[node name="World" type="Node2D"]
script = ExtResource( 3 )
camera = NodePath("Camera")
player = NodePath("player")

[node name="player" parent="." groups=["player"] instance=ExtResource( 2 )]
position = Vector2( -102, 238 )

[node name="playersprite" parent="player" index="0"]
frame = 1

[node name="AnimationTree" parent="player" index="3"]
parameters/playback = SubResource( 1 )

[node name="RemoteTransform2D" parent="player" index="4"]
remote_path = NodePath("../../Camera")

[node name="Camera" type="Camera2D" parent="." groups=["camera"]]
position = Vector2( -102, 238 )
current = true
process_mode = 0
limit_smoothed = true
smoothing_enabled = true
script = ExtResource( 10 )

[node name="room1" parent="." instance=ExtResource( 1 )]

[node name="room2" parent="." instance=ExtResource( 5 )]
position = Vector2( 1629, -20 )

[node name="room3" parent="." groups=["room"] instance=ExtResource( 13 )]
position = Vector2( 3335, -196 )

[node name="roomoutside1" parent="." instance=ExtResource( 14 )]
position = Vector2( 4984, -20 )

[node name="room4" parent="." instance=ExtResource( 7 )]
position = Vector2( 2461, 511 )

[node name="room6" parent="." instance=ExtResource( 8 )]
position = Vector2( 1278, 735 )

[node name="room7" parent="." instance=ExtResource( 9 )]
position = Vector2( 3539, 639 )

[node name="CanvasLayer" type="CanvasLayer" parent="." groups=["canvas"]]

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 6 )
camera_path = NodePath("../../Camera")

[node name="UI" parent="CanvasLayer" instance=ExtResource( 4 )]
player = NodePath("../../player")

[node name="ParallaxBackground" type="ParallaxBackground" parent="CanvasLayer"]
scroll_base_scale = Vector2( 0.2, 0.001 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="CanvasLayer/ParallaxBackground"]
motion_scale = Vector2( 2, 1 )

[node name="Sky" type="TextureRect" parent="CanvasLayer/ParallaxBackground/ParallaxLayer2"]
margin_top = 3.0
margin_right = 7000.0
margin_bottom = 259.0
texture = ExtResource( 12 )
stretch_mode = 2

[node name="ParallaxLayer" type="ParallaxLayer" parent="CanvasLayer/ParallaxBackground"]

[node name="TextureRect" type="TextureRect" parent="CanvasLayer/ParallaxBackground/ParallaxLayer"]
margin_top = 155.0
margin_right = 5971.0
margin_bottom = 338.0
texture = ExtResource( 11 )
stretch_mode = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="CanvasLayer" groups=["Darkness_animator"]]
anims/inside = SubResource( 6 )
anims/outside = SubResource( 5 )

[node name="hider" type="Node2D" parent="."]
z_index = 4

[node name="ColorRect" type="ColorRect" parent="hider"]
margin_left = 1322.0
margin_top = -114.0
margin_right = 1502.0
margin_bottom = 413.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[node name="ColorRect2" type="ColorRect" parent="hider"]
margin_left = 2748.0
margin_top = -338.0
margin_right = 3255.0
margin_bottom = 186.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[node name="ColorRect3" type="ColorRect" parent="hider"]
margin_left = 2136.0
margin_top = 515.0
margin_right = 2465.0
margin_bottom = 1163.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[node name="ColorRect4" type="ColorRect" parent="hider"]
margin_left = 2460.0
margin_top = 361.0
margin_right = 2640.0
margin_bottom = 532.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[node name="ColorRect5" type="ColorRect" parent="hider"]
margin_left = 3297.0
margin_top = 615.0
margin_right = 3548.0
margin_bottom = 786.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[node name="ColorRect6" type="ColorRect" parent="hider"]
margin_left = 4643.0
margin_top = -289.0
margin_right = 4907.0
margin_bottom = 517.0
color = Color( 0.0235294, 0.0235294, 0.0235294, 1 )

[editable path="player"]
[editable path="player/playersprite/hitbox"]
[editable path="player/playersprite/hurtbox"]
